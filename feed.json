{
    "version": "https://jsonfeed.org/version/1",
    "title": "童のBlog",
    "subtitle": "重塑生活",
    "icon": "https://enenf-github-io.vercel.app/images/favicon.ico",
    "description": "林门",
    "home_page_url": "https://enenf-github-io.vercel.app",
    "items": [
        {
            "id": "https://enenf-github-io.vercel.app/2023-university/",
            "url": "https://enenf-github-io.vercel.app/2023-university/",
            "title": "2023，写给自己大学的一篇文章",
            "date_published": "2023-06-27T12:02:14.000Z",
            "content_html": "<p>2023</p>\n<p>yeeee！</p>\n<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>\n",
            "tags": [
                "随笔",
                "总结"
            ]
        },
        {
            "id": "https://enenf-github-io.vercel.app/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "url": "https://enenf-github-io.vercel.app/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "title": "计算机网络",
            "date_published": "2023-06-07T08:47:04.369Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"1说一下http的请求方法\"><a class=\"anchor\" href=\"#1说一下http的请求方法\">#</a> 1. 说一下 http 的请求方法</h5>\n<p>总共有 8 种，</p>\n<p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。<br />\nHTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法</p>\n<p><strong>最常用的四种请求方法：GET, POST, PUT, DELETE</strong></p>\n<p>1、get 请求：<br />\nget：可以理解 为 取 的意思，对应 select 操作<br />\n用来获取数据的，只是用来查询数据，不对服务器的数据做任何的修改，新增，删除等操作。<br />\n说明：<br />\nget 请求会把请求的参数附加在 URL 后面，这样是不安全的，在处理敏感数据时不用，或者参数做加密处理。<br />\nget 请求其实本身 HTTP 协议并没有限制它的 URL 大小，但是不同的浏览器对其有不同的大小长度限制<br />\n 2.post 请求</p>\n<p>数据发送到服务器以创建或更新资源，侧重于更新数据，对应 update 操作<br />\n说明：<br />\npost 请求的请求参数都是请求 body 中</p>\n<p>3、put 请求：</p>\n<p>put：可以理解为 放 的意思</p>\n<p>4、delete 请求：</p>\n<p>delete：字面意思删除，即删除数据，对应 delete 操作<br />\n用来删除指定的资源，它会删除 URI 给出的目标资源的所有当前内容数据发送到服务器以创建或更新资源，侧重于创建数据，对应 insert 操作</p>\n<h5 id=\"2get和post区别\"><a class=\"anchor\" href=\"#2get和post区别\">#</a> 2.get 和 post 区别</h5>\n<p>get 和 post 本质上都是一样的，都是 http 请求的基本方法</p>\n<p>1. 主要的区别在于：</p>\n<p>GET 就发送了一个 TCP 数据包给服务器而 POST 发送了两次 TCP 数据包给服务器</p>\n<p>2.GET 是将数据中的 hearder 和 data 一起发送给服务端，返回 200code；</p>\n<p>POST 是先将 hearder 发给服务器返回 100continue，再发送 data 给到服务器，返回 200</p>\n<p>3.：GET 请求在浏览器刷新或者回退的时候是无害的。POST 的话数据会被重新提交。</p>\n<p>4. 可见性 参数在 URL 用户可以看见，POST 的参数在 REQUSET BODY 中不会被用户看见</p>\n<p>5. 安全性 GET 相对不安全 POST 相对安全些</p>\n",
            "tags": [
                "笔记",
                "面试",
                "http",
                "计算机网络"
            ]
        },
        {
            "id": "https://enenf-github-io.vercel.app/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "url": "https://enenf-github-io.vercel.app/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "title": "浏览器性能优化",
            "date_published": "2023-06-07T08:47:04.366Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"1html渲染过程详解\"><a class=\"anchor\" href=\"#1html渲染过程详解\">#</a> 1.html 渲染过程详解</h5>\n<p>用户输入 url 地址，浏览器根据域名寻找 IP 地址<br />\n浏览器向服务器发送 http 请求，如果服务器段返回以 301 之类的重定向，浏览器根据相应头中的 location 再次发送请求<br />\n服务器端接受请求，处理请求生成 html 代码，返回给浏览器，这时的 html 页面代码可能是经过压缩的<br />\n浏览器接收服务器响应结果，如果有压缩则首先进行解压处理，紧接着就是页面解析渲染</p>\n<p><strong>解析渲染该过程主要分为以下步骤：</strong></p>\n<ol>\n<li><strong>解析 HTML</strong></li>\n<li><strong>构建 DOM 树</strong></li>\n<li><strong>DOM 树与 CSS 样式进行附着构造呈现树</strong></li>\n<li><strong>布局</strong></li>\n<li><strong>绘制</strong></li>\n</ol>\n<h5 id=\"2一个页面从输入url到页面加载显示完成这个过程发生的事\"><a class=\"anchor\" href=\"#2一个页面从输入url到页面加载显示完成这个过程发生的事\">#</a> 2. 一个页面从输入 URL 到页面加载显示完成，这个过程发生的事。</h5>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poY2luaXQwL2FydGljbGUvZGV0YWlscy8xMDcyNTA2MTQvP29wc19yZXF1ZXN0X21pc2M9JmFtcDtyZXF1ZXN0X2lkPSZhbXA7Yml6X2lkPTEwMiZhbXA7dXRtX3Rlcm09JUU5JUExJUI1JUU5JTlEJUEyJUU2JUI4JUIyJUU2JTlGJTkzaHRtbCVFNyU5QSU4NCVFOCVCRiU4NyVFNyVBOCU4QiZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+c29iYWlkdXdlYn5kZWZhdWx0LTQtMTA3MjUwNjE0LjE0MiU1RXY3MyU1RWluc2VydF9kb3duMSwyMDElNUV2NCU1RWFkZF9hc2ssMjM5JTVFdjIlNUVpbnNlcnRfY2hhdGdwdCZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">(112 条消息) HTML 页面渲染的过程_zhcinit0 的博客 - CSDN 博客_html 渲染页面的过程</span></p>\n<p>1. 浏览器查找域名获得对应 ip 地址</p>\n<p>2. 浏览器向 web 服务器发送一个 http 请求</p>\n<p>3. 服务器重定向</p>\n<p>4. 浏览器跟踪重定向地址，请求相应资源</p>\n<p>5. 服务器处理请求</p>\n<p>6. 服务器返回一个 http 响应</p>\n<p>7. 浏览器进行 html 的解析以及渲染绘制制图</p>\n",
            "tags": [
                "笔记",
                "性能优化",
                "性能优化"
            ]
        },
        {
            "id": "https://enenf-github-io.vercel.app/Vue/",
            "url": "https://enenf-github-io.vercel.app/Vue/",
            "title": "Vue",
            "date_published": "2023-06-07T08:47:04.364Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"1说一说对vue的理解\"><a class=\"anchor\" href=\"#1说一说对vue的理解\">#</a> 1. 说一说对 vue 的理解？</h5>\n<p>1、MVVM 是核心特性之一，其中 M 表示 Model 数据，V 表示 View 视图，VM 表示 ViewMode 视图模型层，主要用来连接 Model 和 View</p>\n<p>2、组件化开发思想：在 vue 中可以把图形和非图形的各种逻辑抽象为一个统一得到概念来实现开发模式，每个.vue 文件就代表着一个组件</p>\n<p>组件化的优势:</p>\n<p>降低了耦合度，可以通过组件快速完成需求</p>\n<p>调试方便，页面上很多地方使用同一个组件，在出问题时只需要调试这个地方就行了</p>\n<p>提高了可维护性，组件的维护成本低</p>\n<p>3、vue 有着特色的指令系统</p>\n<p>比如条件渲染 v-if，列表渲染 v-for，属性绑定 v-bind，双向绑定 v-model，事件绑定 v-on 等等，在没有这些指令之前，我们获取需要通过操作 dom 的形式进行一些操作，比较麻烦</p>\n<h5 id=\"2谈谈对生命周期的理解\"><a class=\"anchor\" href=\"#2谈谈对生命周期的理解\">#</a> 2.<strong> 谈谈对生命周期的理解</strong></h5>\n<p>1、beforeCreate 组件实例被创建之前</p>\n<ul>\n<li>初始化 vue 实例，进行数据观测</li>\n</ul>\n<p>2、created 组件实例已经被完全创建</p>\n<ul>\n<li>完成数据观测，属性与方法的运算，watch、event 事件回调的配置</li>\n<li>可调用 methods 中的方法，访问和修改 data 数据触发响应式渲染 dom，可通过 computed 和 watch 完成数据计算</li>\n<li>此时 vm.$el 并没有被创建</li>\n</ul>\n<p>3、beforeMount 组件挂载之前</p>\n<ul>\n<li>在此阶段可获取到 vm.el</li>\n<li>此阶段 vm.el 虽已完成 DOM 初始化，但并未挂载在 el 选项上</li>\n</ul>\n<p>4、mounted 组件挂载到实例上去之后</p>\n<ul>\n<li>vm.el 已完成 DOM 的挂载与渲染，此刻打印 vm.$el，发现之前的挂载点及内容已被替换成新的 DOM</li>\n</ul>\n<p>5、beforeupdated 组件更新之前</p>\n<ul>\n<li>更新的数据必须是被渲染在模板上的（el、template、render 之一）</li>\n<li>此时 view 层还未更新</li>\n<li>若在 beforeUpdate 中再次修改数据，不会再次触发更新方法</li>\n</ul>\n<p>6、updated 组件数据更新之后</p>\n<ul>\n<li>完成 view 层的更新</li>\n<li>若在 updated 中再次修改数据，会再次触发更新方法（beforeUpdate、updated）</li>\n</ul>\n<p>7、beforedestroy 组件实例被销毁之前</p>\n<ul>\n<li>实例被销毁前调用，此时实例属性与方法仍可访问</li>\n</ul>\n<p>8、destoryed 组件实例被销毁之后</p>\n<ul>\n<li>完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</li>\n<li>并不能清除 DOM，仅仅销毁实例</li>\n</ul>\n<p>9、activated，keepalive 缓存组件激活时</p>\n<p>10、deactivated，keepalive 缓存的组件停止调用时</p>\n<h5 id=\"3数据请求在created和mounted中的区别\"><a class=\"anchor\" href=\"#3数据请求在created和mounted中的区别\">#</a> 3.<strong> 数据请求在 created 和 mounted 中的区别</strong></h5>\n<p>1、created 的时候页面的 dom 还未生成，mounted 的时候页面 dom 已经生成了</p>\n<p>2、created 获取数据比 mounted 更早，两者的相同点：都能拿到实例对象的属性和方法。</p>\n<p>3、放在 mounted 中的请求有可能导致页面闪动 (因为 dom 已经生成了)</p>\n<h5 id=\"4vue里组件间通信的方式有哪些\"><a class=\"anchor\" href=\"#4vue里组件间通信的方式有哪些\">#</a> 4<strong>vue 里组件间通信的方式有哪些</strong></h5>\n<p>1、vuex 全局状态管理 (pinia)</p>\n<p>2、父组件通过标签进行值的传递，子组件通过 props 接收</p>\n<p>3、eventbus 来进行传递</p>\n<p>4、子组件通过 emit 来进行发布事件</p>\n<p>5、通过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">parent和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">和</span></span></span></span> children 来进行传递</p>\n<p>6、通过 provide 和 inject 来进行注入</p>\n<p>7、通过 ref 进行传值</p>\n<p>8. 自定义事件</p>\n<p>9.pubsub-js</p>\n<p>10. 插槽</p>\n<p>11vuex</p>\n",
            "tags": [
                "笔记",
                "Vue",
                "Vue",
                "vite"
            ]
        },
        {
            "id": "https://enenf-github-io.vercel.app/JavaScript/",
            "url": "https://enenf-github-io.vercel.app/JavaScript/",
            "title": "JavaScript",
            "date_published": "2023-06-07T08:47:04.360Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h6 id=\"1什么是闭包\"><a class=\"anchor\" href=\"#1什么是闭包\">#</a> <strong>1. 什么是闭包？</strong></h6>\n<p>内层函数 + 引用的外层函数变量 = 闭包</p>\n<p>闭包的主要应用就是进行数据的私用化，减少全局变量</p>\n<p>闭包的内存泄露：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/enenf/blog-cdn/note/image-20230213220712311.png\" alt=\"image-20230213220712311\" /></p>\n<h6 id=\"2宏任务和微任务\"><a class=\"anchor\" href=\"#2宏任务和微任务\">#</a> <strong>2. 宏任务和微任务？</strong></h6>\n<ul>\n<li>\n<p>宏任务：setTimeout，setInterval，Ajax，DOM 事件</p>\n</li>\n<li>\n<p>微任务：Promise，process.nextTick</p>\n<p>宏任务在异步任务中不需要连贯执行，微任务在异步任务中需要连贯执行</p>\n</li>\n</ul>\n<p>微任务的执行时机要比宏任务早！（可以先记一哈，后面会继续说这点）</p>\n<p>Dom 事件不是异步操作，但是它依赖了 eventloop 机制，所以也归在这点里了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 答案为： 100 400 300 200</span></pre></td></tr></table></figure><h6 id=\"3防抖和节流\"><a class=\"anchor\" href=\"#3防抖和节流\">#</a> 3. 防抖和节流</h6>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/enenf/blog-cdn/note/image-20230213224807631.png\" alt=\"image-20230213224807631\" /></p>\n<h6 id=\"4js函数的几种声明方式\"><a class=\"anchor\" href=\"#4js函数的几种声明方式\">#</a> 4.js 函数的几种声明方式</h6>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/enenf/blog-cdn/note/image-20230213225234423.png\" alt=\"image-20230213225234423\" /></p>\n<h6 id=\"5谈谈你对原型的理解\"><a class=\"anchor\" href=\"#5谈谈你对原型的理解\">#</a> 5. 谈谈你对原型的理解？</h6>\n<p>1、所有的引用类型（数组、函数、对象）可以自由扩展属性（除 null 以外）。</p>\n<p>2、所有的引用类型都有一个’_ _ proto_ _' 属性 (也叫隐式原型，它是一个普通的对象)。</p>\n<p>3、所有的函数都有一个’prototype’属性 (这也叫显式原型，它也是一个普通的对象)。</p>\n<p>4、所有引用类型，它的’_ _ proto_ _' 属性指向它的构造函数的’prototype’属性。</p>\n<p>5、当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的’_ _ proto_ _' 属性 (也就是它的构造函数的’prototype’属性) 中去寻找。</p>\n<h6 id=\"6箭头函数和普通函数的区别\"><a class=\"anchor\" href=\"#6箭头函数和普通函数的区别\">#</a> 6. 箭头函数和普通函数的区别？</h6>\n<p>1. 箭头函数比普通函数更简洁</p>\n<p>2. 箭头函数没有 this 指针</p>\n<p>3. 箭头函数继承的 this 指针永远不会改变，因此 call，apply,bind 等方法不能改变箭头函数中的</p>\n<p>this 指向</p>\n<p>4. 箭头函数不能作为构造函数使用</p>\n<p>由于箭头函数时没有自己的 this，且 this 指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<p>5. 箭头函数没有自己的 arguments</p>\n<p>箭头函数没有自己的 arguments 对象。在箭头函数中访问 arguments 实际上获得的是它外层函数的 arguments 值。</p>\n<ol start=\"6\">\n<li>箭头函数没有 prototype</li>\n</ol>\n<h5 id=\"7说一说跨域是什么如何解决跨域问题\"><a class=\"anchor\" href=\"#7说一说跨域是什么如何解决跨域问题\">#</a> 7. 说一说跨域是什么，如何解决跨域问题？</h5>\n<p>跨域的概念：浏览器不能执行其它的网站的脚本，这由浏览器的同源策略造成的，也是浏览器施加安全的限制</p>\n<p>跨域解决方案： - jsonp - 前端 proxy 后端 cors - 线上 Nginx - websockt</p>\n<h5 id=\"8js类型\"><a class=\"anchor\" href=\"#8js类型\">#</a> 8.js 类型</h5>\n<p>7 种基本数据类型</p>\n<p>undefined</p>\n<p>null</p>\n<p>number</p>\n<p>string</p>\n<p>boolean</p>\n<p>symbol</p>\n<p>bigint</p>\n<p>3 种引用数据类型</p>\n<p>object</p>\n<p>function</p>\n<p>array</p>\n<h5 id=\"9数据类型的检查方式有那些\"><a class=\"anchor\" href=\"#9数据类型的检查方式有那些\">#</a> 9. 数据类型的检查方式有那些</h5>\n<p>1.typeof</p>\n<p>2.instanceof</p>\n<p>3.constructor</p>\n<p>4.object.prototype.toString.call()</p>\n<h5 id=\"10-es6新增了那些新语法\"><a class=\"anchor\" href=\"#10-es6新增了那些新语法\">#</a> 10 es6 新增了那些新语法</h5>\n<p>1.let const</p>\n<p>2. 解构赋值</p>\n<p>3. 模板字符串</p>\n<p>4.map set 数组新方法如 forEach find map () filter () Array.from ()</p>\n<p>5. 箭头函数</p>\n<p>6. 类</p>\n<p>7.promise 和 proxy</p>\n<p>8. 模块化</p>\n",
            "tags": [
                "笔记",
                "面试",
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "https://enenf-github-io.vercel.app/HTML+CSS/",
            "url": "https://enenf-github-io.vercel.app/HTML+CSS/",
            "title": "HTML+CSS",
            "date_published": "2023-06-07T08:47:04.357Z",
            "content_html": "<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h5 id=\"1说一下浮动\"><a class=\"anchor\" href=\"#1说一下浮动\">#</a> 1. 说一下浮动？</h5>\n<p>浮动是脱离文档的普通流存在的（可以看作是漂浮在普通流上），它可以左右浮动，直到它的外边缘遇到包含框或者另一个浮动框为止，<strong>脱离文档流，盒子塌陷，影响其他元素排版</strong></p>\n<h5 id=\"2html语义化是什么\"><a class=\"anchor\" href=\"#2html语义化是什么\">#</a> 2.html 语义化是什么？</h5>\n<ol>\n<li>有利于 SEO，搜索引擎根据标签确定上下文和各个关键字的权重。</li>\n<li>利于用户阅读，样式文件未加载时页面结构清晰。</li>\n<li>利于屏幕阅读器解析，如盲人阅读器会根据语义渲染网页。</li>\n<li>利于开发和维护，代码更具可读性、更易于维护。</li>\n</ol>\n<h5 id=\"3说一说css尺寸设置的单位\"><a class=\"anchor\" href=\"#3说一说css尺寸设置的单位\">#</a> 3. 说一说 CSS 尺寸设置的单位</h5>\n<p>1.px 绝对像素</p>\n<p>2.rem 相对于根元素像素，</p>\n<p>3.em 相对于父元素像素</p>\n<p>4.vw 视口宽度</p>\n<p>5.vh 视口高度</p>\n<h5 id=\"4过渡transition有哪些属性\"><a class=\"anchor\" href=\"#4过渡transition有哪些属性\">#</a> 4. 过渡 transition 有哪些属性</h5>\n<p>transition-property ：规定设置过渡效果的 css 属性名称，常用值 “all” 全部 css 属性进行动画效果添加<br />\n transition-duration ：规定完成过渡效果需要多少秒或毫秒<br />\n transition-timing-function ：指定过渡函数，规定速度效果的速度曲线 常用值：关键字描述：linear ease-in ease-in-out<br />\ntransition-delay ：指定开始出现的延迟时间</p>\n<h5 id=\"5css3新特性\"><a class=\"anchor\" href=\"#5css3新特性\">#</a> 5.css3 新特性</h5>\n<p>圆角 （border-radius:8px）</p>\n<p>文字特效 （text-shadow）</p>\n<p>文字渲染 （Text-decoration）</p>\n<p>box-shadow</p>\n<p>线性渐变 （gradient）</p>\n<p>转换 （transform）</p>\n<p>transition</p>\n<p>animation 动画</p>\n<p>增加了旋转，缩放，定位，倾斜，动画，多背景</p>\n",
            "tags": [
                "笔记",
                "面试",
                "CSS",
                "HTML",
                "CSS"
            ]
        },
        {
            "id": "https://enenf-github-io.vercel.app/coding-train/hot-100/day1/",
            "url": "https://enenf-github-io.vercel.app/coding-train/hot-100/day1/",
            "title": "剑指offer day1 栈与队列（简单）",
            "date_published": "2022-03-30T08:00:52.000Z",
            "content_html": "<p>day1 题目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=\">剑指 Offer 09. 用两个栈实现队列</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=\">剑指 Offer 30. 包含 min 函数的栈</span></p>\n<p>知识点：栈、队列、设计，难度为简单、简单</p>\n<p>学习计划链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vc3R1ZHktcGxhbi9sY29mLz9wcm9ncmVzcz03am43MGpy\">「剑指 Offer」 - 学习计划</span></p>\n<table>\n<thead>\n<tr>\n<th>题目</th>\n<th>知识点</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=\">剑指 Offer 09. 用两个栈实现队列</span></td>\n<td>栈、设计、队列</td>\n<td>简单</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=\">剑指 Offer 30. 包含 min 函数的栈</span></td>\n<td>栈、设计</td>\n<td>简单</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"剑指-offer-09-用两个栈实现队列\"><a class=\"anchor\" href=\"#剑指-offer-09-用两个栈实现队列\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveW9uZy1saWFuZy1nZS16aGFuLXNoaS14aWFuLWR1aS1saWUtbGNvZi8=\">剑指 Offer 09. 用两个栈实现队列</span></h1>\n<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数  <code>appendTail</code>  和  <code>deleteHead</code>  ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素， <code>deleteHead</code>  操作返回 -1 )</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：\n[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]\n[[],[3],[],[]]\n输出： [null,null,3,-1]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：\n[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]\n[[],[],[5],[2],[],[]]\n输出： [null,-1,null,null,5,2]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= values &lt;= 10000</code></li>\n<li><code>最多会对 appendTail、deleteHead 进行 10000 次调用</code></li>\n</ul>\n<h2 id=\"思路及代码\"><a class=\"anchor\" href=\"#思路及代码\">#</a> 思路及代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @algorithm @lc id=100273 lang=javascript </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @title yong-liang-ge-zhan-shi-xian-dui-lie-lcof</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">CQueue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">// 入队</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">// 出队</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @param &#123;number&#125; value</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @return &#123;void&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">appendTail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">deleteHead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * Your CQueue object will be instantiated and called as such:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * var obj = new CQueue()</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * obj.appendTail(value)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * var param_2 = obj.deleteHead()</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"剑指-offer-30-包含min函数的栈\"><a class=\"anchor\" href=\"#剑指-offer-30-包含min函数的栈\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFvLWhhbi1taW5oYW4tc2h1LWRlLXpoYW4tbGNvZi8=\">剑指 Offer 30. 包含 min 函数的栈</span></h1>\n<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O (1)。</p>\n<p><strong>示例:</strong></p>\n<pre><code>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.min();   --&gt; 返回 -2.\n</code></pre>\n<p><strong>提示：</strong></p>\n<ol>\n<li>各函数的调用总次数不超过 20000 次</li>\n</ol>\n<p>注意：本题与主站 155 题相同：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluLXN0YWNrLw==\">https://leetcode-cn.com/problems/min-stack/</span></p>\n<h2 id=\"思路及代码-2\"><a class=\"anchor\" href=\"#思路及代码-2\">#</a> 思路及代码</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @algorithm @lc id=100302 lang=javascript </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @title bao-han-minhan-shu-de-zhan-lcof</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * initialize your data structure here.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">MinStack</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @param &#123;number&#125; x</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @return &#123;void&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">push</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//push 的元素小于当前元素，将其放入 mins</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * @return &#123;void&#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">pop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果 pop 的元素是 mins 的最后一个元素，则 mins 也要 pop</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">top</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">min</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mins<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre> * Your MinStack object will be instantiated and called as such:</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * var obj = new MinStack()</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> * obj.push(x)</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> * obj.pop()</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * var param_3 = obj.top()</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * var param_4 = obj.min()</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// -3</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> obj<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// -2</span></pre></td></tr></table></figure>",
            "tags": [
                "题目记录",
                "剑指offer",
                "leetcode",
                "栈",
                "队列",
                "设计"
            ]
        }
    ]
}